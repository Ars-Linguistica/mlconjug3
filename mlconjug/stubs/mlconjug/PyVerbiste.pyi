# Stubs for mlconjug.PyVerbiste (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Text, List, Dict, DefaultDict, KeysView, ValuesView, ItemsView, Tuple, Optional, Union, Set, TextIO

__author__: Text
__author_email__: str
_RESOURCE_PACKAGE = __name__
_LANGUAGES: Tuple[Text]
_VERBS_RESOURCE_PATH: Dict[Text, Text]
_CONJUGATIONS_RESOURCE_PATH: Dict[Text, Text]
_ABBREVS: Tuple[Text]
_PRONOUNS: Dict[Text, Dict[Text, Tuple[Text]]]
_IMPERATIVE_PRONOUNS: Dict[Text, Optional[Dict[Text, Tuple[Text]]]]
_GENDER: Dict[Text, Optional[Dict[Text, Tuple[Text]]]]
_NEGATION: Dict[Text, Text]

class Verbiste:
    language: str = ...
    verbs: Dict[[Text, Dict[Text, Text]]] = ...
    conjugations: Dict[Text, Dict[Text, Union[Text, List[Text]]]] = ...
    _allowed_endings: Set[Text] = ...
    templates: List[Text] = ...
    def __init__(self, language: Text = ...) -> None: ...
    def __repr__(self) -> None: ...
    def _load_verbs(self, verbs_file: Union[Text, TextIO]) -> None: ...
    def _parse_verbs(self, file: Union[Text, TextIO]) -> Dict[Text, Dict[Text, Text]]: ...
    def _detect_allowed_endings(self) -> Set[Text]: ...
    def is_valid_verb(self, verb: Text) -> bool: ...
    def _load_conjugations(self, conjugations_file: Union[Text, TextIO]) -> None: ...
    def _parse_conjugations(self, file: Union[Text, TextIO]) -> Dict[Text, Dict[Text, Union[Text, List[Text]]]]: ...
    def _load_tense(self, tense: Text) -> Optional[Union[Text, List[Text]]]: ...
    def get_verb_info(self, verb: Text) -> Optional[VerbInfo]: ...
    def get_conjug_info(self, template: Text) -> Optional[Dict[Dict[Text, Union[Text, List[Text]]]]]: ...

class VerbInfo:
    __slots__: Tuple[Text] = ...
    infinitive: Text = ...
    root: Text = ...
    template: Text = ...
    def __init__(self, infinitive: Text, root: Text, template: Text) -> None: ...
    def __repr__(self) -> Text: ...
    def __eq__(self, other: VerbInfo) -> bool: ...

class Verb:
    __slots__: Tuple[Text] = ...
    language: Text = ...
    name: Text = ...
    verb_info: VerbInfo = ...
    conjug_info: Optional[Dict[Dict[Text, Union[Text, List[Text]]]]] = ...
    subject: Text = ...
    def __init__(self, verb_info: VerbInfo, conjug_info: Optional[Dict[Dict[Text, Union[Text, List[Text]]]]], subject: Text = ...) -> None: ...
    def __repr__(self) -> Text: ...
    def _load_conjug(self) -> None: ...

class VerbFr(Verb):
    __slots__: Tuple[Text] = ...
    language: Text = ...
    def _load_conjug(self) -> None: ...

class VerbEn(Verb):
    __slots__: Tuple[Text] = ...
    language: Text = ...
    def _load_conjug(self) -> None: ...

class VerbEs(Verb):
    __slots__: Tuple[Text] = ...
    language: Text = ...
    def _load_conjug(self) -> None: ...

class VerbIt(Verb):
    __slots__: Tuple[Text] = ...
    language: Text = ...
    def _load_conjug(self) -> None: ...

class VerbPt(Verb):
    __slots__: Tuple[Text] = ...
    language: Text = ...
    def _load_conjug(self) -> None: ...

class VerbRo(Verb):
    __slots__: Tuple[Text] = ...
    language: Text = ...
    def _load_conjug(self) -> None: ...
