# Stubs for mlconjug.mlconjug (Python 3.4 to 3.6)

from .PyVerbiste import Verb, Verbiste
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.base import BaseEstimator
from typing import Optional, Text, Mapping, Sequence, DefaultDict, KeysView, Union


_RESOURCE_PACKAGE: Text = __name__
_LANGUAGE_FULL: Mapping[Text, Text]
_VERBS: Mapping[Text, Verb]
_PRE_TRAINED_MODEL_PATH: Mapping[Text, Text]


class Conjugator:
    language: Text = ...
    # verbiste: Verbiste = ...
    data_set: DataSet = ...
    model: Model = ...
    def __init__(self,
                 language: Text = ...,
                 model: Optional[Model] = ...
                 ) -> None: ...

    def __repr__(self) -> Text: ...

    def conjugate(self,
                  verb: Text,
                  subject: Text = ...
                  ) -> Optional[Verb]: ...

    def set_model(self,
                  model: Model
                  ) -> None: ...


class EndingCountVectorizer(CountVectorizer):
    def _char_ngrams(self,
                     verb: Text
                     ) -> Sequence[Text]: ...


class DataSet:
    verbiste: Verbiste = ...
    verbs: KeysView[Text] = ...
    templates: Sequence[Text] = ...
    liste_verbs: Sequence[Text] = ...
    liste_templates: Sequence[int] = ...
    dict_conjug: DefaultDict[Text,Sequence[Text]] = ...
    train_input: Sequence[Text] = ...
    train_labels: Sequence[int] = ...
    test_input: Sequence[Text] = ...
    test_labels: Sequence[int] = ...
    min_threshold: int = ...
    split_proportion: float = ...
    def __init__(self,
                 VerbisteObj: Verbiste
                 ) -> None: ...

    def __repr__(self) -> Text: ...

    def construct_dict_conjug(self) -> None: ...

    def split_data(self,
                   threshold: int = ...,
                   proportion: float = ...
                   ) -> None: ...

class Model:
    model: Model = ...
    def __init__(self,
                 vectorizer: Optional[Union[EndingCountVectorizer, CountVectorizer]] = ...,
                 feature_selector: Optional[BaseEstimator] = ...,
                 classifier: Optional[BaseEstimator] = ...
                 ) -> None: ...

    def __repr__(self) -> Text: ...

    def train(self,
              samples: Sequence[Text],
              labels: Sequence[int],
              ) -> None: ...

    def predict(self,
                verbs: Sequence[Text]
                ) -> Optional[Verb]: ...
