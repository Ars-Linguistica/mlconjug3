# Stubs for mlconjug.mlconjug (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .PyVerbiste import Verb, VerbEn, VerbEs, VerbFr, VerbInfo, VerbIt, VerbPt, VerbRo, Verbiste
from sklearn.feature_extraction.text import CountVectorizer
from typing import Any, Optional

RESOURCE_PACKAGE = __name__
LANGUAGE_FULL: Any
VERBS: Any
PRE_TRAINED_MODEL_PATH: Any

class Conjugator:
    language: Any = ...
    verbiste: Any = ...
    data_set: Any = ...
    model: Any = ...
    def __init__(self, language: str = ..., model: Optional[Any] = ...) -> None: ...
    def __repr__(self): ...
    def conjugate(self, verb: Any, subject: str = ...): ...
    def set_model(self, model: Any): ...

class EndingCountVectorizer(CountVectorizer):
    def _char_ngrams(self, verb: Any): ...

class DataSet:
    verbiste: Any = ...
    verbes: Any = ...
    templates: Any = ...
    liste_verbes: Any = ...
    liste_templates: Any = ...
    dict_conjug: Any = ...
    train_input: Any = ...
    train_labels: Any = ...
    test_input: Any = ...
    test_labels: Any = ...
    def __init__(self, VerbisteObj: Any) -> None: ...
    def __repr__(self): ...
    def construct_dict_conjug(self): ...
    min_threshold: Any = ...
    split_proportion: Any = ...
    def split_data(self, threshold: int = ..., proportion: float = ...): ...

class Model:
    model: Any = ...
    def __init__(self, vectorizer: Optional[Any] = ..., feature_selector: Optional[Any] = ..., classifier: Optional[Any] = ...) -> None: ...
    def __repr__(self): ...
    def train(self, samples: Any, labels: Any): ...
    def predict(self, verbs: Any): ...
