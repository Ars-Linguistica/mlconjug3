# TRANSLATION TEMPLATE FOR modules.rst.
# Copyright (C) 2018, SekouD
# This file is distributed under the same license as the MLConjug package.
# SekouD <sekoud.python@gmail.com>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MLConjug 2.1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-16 21:18+0200\n"
"PO-Revision-Date: 2018-06-16 18:14+0000\n"
"Last-Translator: SekouD <sekoud.python@gmail.com>.\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../modules.rst:3
msgid "Package Api Documentation for mlconjug"
msgstr ""

#: ../../modules.rst:7
msgid "API Reference for the classes in mlconjug.mlconjug.py"
msgstr ""

#: mlconjug.mlconjug:1 of
msgid "MLConjug Main module."
msgstr ""

#: mlconjug.mlconjug:3 of
msgid "This module declares the main classes the user interacts with."
msgstr ""

#: mlconjug.mlconjug:5 of
msgid ""
"The module defines the classes needed to interface with Machine Learning "
"models."
msgstr ""

#: mlconjug.PyVerbiste.Verb:1 mlconjug.PyVerbiste.VerbInfo:1
#: mlconjug.PyVerbiste.Verbiste:1 mlconjug.mlconjug.Conjugator:1
#: mlconjug.mlconjug.DataSet:1 mlconjug.mlconjug.Model:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: mlconjug.mlconjug.Conjugator:1 of
msgid "This is the main class of the project."
msgstr ""

#: mlconjug.mlconjug.Conjugator:2 of
msgid ""
"The class manages the Verbiste data set and provides an interface with "
"the scikit-learn model."
msgstr ""

#: mlconjug.mlconjug.Conjugator:3 of
msgid ""
"If no parameters are provided, the default language is set to french and "
"the pre-trained french conjugation model is used."
msgstr ""

#: mlconjug.mlconjug.Conjugator:4 of
msgid ""
"The class defines the method conjugate(verb, language) which is the main "
"method of the module."
msgstr ""

#: mlconjug.PyVerbiste.Verb mlconjug.PyVerbiste.VerbInfo
#: mlconjug.PyVerbiste.Verbiste mlconjug.PyVerbiste.Verbiste._load_conjugations
#: mlconjug.PyVerbiste.Verbiste._load_tense
#: mlconjug.PyVerbiste.Verbiste._load_verbs
#: mlconjug.PyVerbiste.Verbiste._parse_conjugations
#: mlconjug.PyVerbiste.Verbiste._parse_verbs
#: mlconjug.PyVerbiste.Verbiste.get_conjug_info
#: mlconjug.PyVerbiste.Verbiste.get_verb_info
#: mlconjug.PyVerbiste.Verbiste.is_valid_verb mlconjug.mlconjug.Conjugator
#: mlconjug.mlconjug.Conjugator.conjugate
#: mlconjug.mlconjug.Conjugator.set_model mlconjug.mlconjug.DataSet
#: mlconjug.mlconjug.DataSet.split_data
#: mlconjug.mlconjug.EndingCountVectorizer._char_ngrams mlconjug.mlconjug.Model
#: mlconjug.mlconjug.Model.predict mlconjug.mlconjug.Model.train of
msgid "Parameters"
msgstr ""

#: mlconjug.mlconjug.Conjugator:6 of
msgid ""
"string. Language of the conjugator. The default language is 'fr' for "
"french."
msgstr ""

#: mlconjug.mlconjug.Conjugator:8 of
msgid "string. A user provided model if the user has trained his own model."
msgstr ""

#: mlconjug.mlconjug.Conjugator.conjugate:1 of
msgid "This is the main method of this class."
msgstr ""

#: mlconjug.mlconjug.Conjugator.conjugate:2 of
msgid "It first checks to see if the verb is in Verbiste."
msgstr ""

#: mlconjug.mlconjug.Conjugator.conjugate:3 of
msgid ""
"If it is not, and a pre-trained scikit-learn model has been supplied, the"
" method then calls the model"
msgstr ""

#: mlconjug.mlconjug.Conjugator.conjugate:4 of
msgid "to predict the conjugation class of the provided verb."
msgstr ""

#: mlconjug.mlconjug.Conjugator.conjugate:6 of
msgid "Returns a Verb object or None."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.get_verb_info:3
#: mlconjug.mlconjug.Conjugator.conjugate:8 of
msgid "string. Verb to conjugate."
msgstr ""

#: mlconjug.PyVerbiste.Verb:5 mlconjug.mlconjug.Conjugator.conjugate:10 of
msgid ""
"string. Toggles abbreviated or full pronouns. The default value is "
"'abbrev'. Select 'pronoun' for full pronouns."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._detect_allowed_endings
#: mlconjug.PyVerbiste.Verbiste._load_tense
#: mlconjug.PyVerbiste.Verbiste._parse_conjugations
#: mlconjug.PyVerbiste.Verbiste._parse_verbs
#: mlconjug.PyVerbiste.Verbiste.get_conjug_info
#: mlconjug.PyVerbiste.Verbiste.get_verb_info
#: mlconjug.PyVerbiste.Verbiste.is_valid_verb
#: mlconjug.mlconjug.Conjugator.conjugate
#: mlconjug.mlconjug.EndingCountVectorizer._char_ngrams
#: mlconjug.mlconjug.Model.predict of
msgid "Returns"
msgstr ""

#: mlconjug.mlconjug.Conjugator.conjugate:14 of
msgid "Verb object or None."
msgstr ""

#: mlconjug.mlconjug.Conjugator.set_model:1 of
msgid ""
"Assigns the provided pre-trained scikit-learn model to be able to "
"conjugate unknown verbs."
msgstr ""

#: mlconjug.mlconjug.Conjugator.set_model:3 of
msgid "scikit-learn Classifier or Pipeline."
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer:1 of
msgid "Bases: :class:`sklearn.feature_extraction.text.CountVectorizer`"
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer:1 of
msgid "Custom Vectorizer optimized for extracting verbs features."
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer:2 of
msgid ""
"The Vectorizer subclasses sklearn.feature_extraction.text.CountVectorizer"
" ."
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer:3 of
msgid ""
"As in Indo-European languages verbs are inflected by adding a "
"morphological suffix,"
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer:4 of
msgid ""
"the vectorizer extracts verb endings and produces a vector representation"
" of the verb with binary features."
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer:6 of
msgid ""
"The features are the verb ending ngrams. (ngram_range is set at class "
"instanciation)."
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer._char_ngrams:1 of
msgid "Parses a verb and returns the ending n-grams."
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer._char_ngrams:3 of
msgid "string. Verb to vectorize."
msgstr ""

#: mlconjug.mlconjug.EndingCountVectorizer._char_ngrams:5 of
msgid "list. Final n-grams of the verb."
msgstr ""

#: mlconjug.mlconjug.DataSet:1 of
msgid "This class holds and manages the data set."
msgstr ""

#: mlconjug.mlconjug.DataSet:2 of
msgid ""
"Defines helper functions for managing Machine Learning tasks like "
"constructing a training and testing set."
msgstr ""

#: mlconjug.mlconjug.DataSet:4 of
msgid "Instance of a Verbiste object."
msgstr ""

#: mlconjug.mlconjug.DataSet.construct_dict_conjug:1 of
msgid "Populates the dictionary containing the conjugation templates."
msgstr ""

#: mlconjug.mlconjug.DataSet.construct_dict_conjug:2 of
msgid "Populates the lists containing the verbs and their templates."
msgstr ""

#: mlconjug.mlconjug.DataSet.split_data:1 of
msgid "Splits the data into a training and a testing set."
msgstr ""

#: mlconjug.mlconjug.DataSet.split_data:3 of
msgid "int. Minimum size of conjugation class to be split."
msgstr ""

#: mlconjug.mlconjug.DataSet.split_data:5 of
msgid "float. Proportion of samples in the training set. Must be between 0 and 1."
msgstr ""

#: mlconjug.mlconjug.Model:1 of
msgid "This class manages the scikit-learn model."
msgstr ""

#: mlconjug.mlconjug.Model:2 of
msgid ""
"The Pipeline includes a feature vectorizer, a feature selector and a "
"classifier."
msgstr ""

#: mlconjug.mlconjug.Model:3 of
msgid ""
"If any of the vectorizer, feature selector or classifier is not supplied "
"at instance declaration,"
msgstr ""

#: mlconjug.mlconjug.Model:4 of
msgid ""
"the __init__ method will provide good default values that get more than "
"92% prediction accuracy."
msgstr ""

#: mlconjug.mlconjug.Model:6 of
msgid "scikit-learn Vectorizer."
msgstr ""

#: mlconjug.mlconjug.Model:7 of
msgid "scikit-learn Classifier with a fit_transform() method"
msgstr ""

#: mlconjug.mlconjug.Model:8 of
msgid "scikit-learn Classifier with a predict() method"
msgstr ""

#: mlconjug.mlconjug.Model.train:1 of
msgid "Trains the model on the supplied samples and labels."
msgstr ""

#: mlconjug.mlconjug.Model.predict:3 mlconjug.mlconjug.Model.train:3 of
msgid "list. List of verbs."
msgstr ""

#: mlconjug.mlconjug.Model.train:5 of
msgid "list. List of verb templates."
msgstr ""

#: mlconjug.mlconjug.Model.predict:1 of
msgid "Predicts the conjugation class of the provided list of verbs."
msgstr ""

#: mlconjug.mlconjug.Model.predict:5 of
msgid "list. List of predicted conjugation groups."
msgstr ""

#: ../../modules.rst:17
msgid "API Reference for the classes in mlconjug.PyVerbiste.py"
msgstr ""

#: mlconjug.PyVerbiste:1 of
msgid "PyVerbiste."
msgstr ""

#: mlconjug.PyVerbiste:3 of
msgid ""
"A Python library for conjugating verbs in French, English, Spanish, "
"Italian, Portuguese and Romanian (more soon)."
msgstr ""

#: mlconjug.PyVerbiste:4 of
msgid ""
"It contains conjugation data generated by machine learning models using "
"the python library mlconjug."
msgstr ""

#: mlconjug.PyVerbiste:5 of
msgid "More information about mlconjug at https://pypi.org/project/mlconjug/"
msgstr ""

#: mlconjug.PyVerbiste:8 of
msgid "The conjugation data conforms to the XML schema defined by Verbiste."
msgstr ""

#: mlconjug.PyVerbiste:9 of
msgid ""
"More information on Verbiste at "
"https://perso.b2b2c.ca/~sarrazip/dev/verbiste.html"
msgstr ""

#: mlconjug.PyVerbiste.Verbiste:1 of
msgid "This is the class handling the Verbiste xml files."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste:3 of
msgid "string."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste:4 of
msgid "The language of the conjugator. The default value is fr for French."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste:5 of
msgid "The allowed values are: fr, en, es, it, pt, ro."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._load_verbs:1 of
msgid "Load and parses the verbs from xml file."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._load_verbs:3 of
msgid "string or path object. Path to the verbs xml file."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._parse_conjugations:1
#: mlconjug.PyVerbiste.Verbiste._parse_verbs:1 of
msgid "Parses XML file."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._parse_verbs:3 of
msgid "FileObject. XML file containing the verbs."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._parse_verbs:5 of
msgid ""
"OrderedDict. An OrderedDict containing the verb and its template for all "
"verbs in the file."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._detect_allowed_endings:1 of
msgid "Detects the allowed endings for verbs in the supported languages."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._detect_allowed_endings:2 of
msgid ""
"All the supported languages except for English restrict the form a verb "
"can take."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._detect_allowed_endings:3 of
msgid ""
"As English is much more productive and varied in the morphology of its "
"verbs, any word is allowed as a verb."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._detect_allowed_endings:5 of
msgid "set. A set containing the allowed endings of verbs in the target language."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.is_valid_verb:1 of
msgid "Checks if the verb is a valid verb in the given language."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.is_valid_verb:2 of
msgid "English words are always treated as possible verbs."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.is_valid_verb:3 of
msgid "Verbs in other languages are filtered by their endings."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.is_valid_verb:5 of
msgid "string. The verb to conjugate."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.is_valid_verb:7 of
msgid "bool. True if the verb is a valid verb in the language. False otherwise."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._load_conjugations:1 of
msgid "Load and parses the conjugations from xml file."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._load_conjugations:3 of
msgid "string or path object. Path to the conjugation xml file."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._parse_conjugations:3 of
msgid "FileObject. XML file containing the conjugation templates."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._parse_conjugations:5 of
msgid ""
"OrderedDict. An OrderedDict containing all the conjugation templates in "
"the file."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._load_tense:1 of
msgid "Load and parses the inflected forms of the tense from xml file."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._load_tense:3 of
msgid "string. The current tense being processed."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste._load_tense:5 of
msgid "list. List of conjugated suffixes."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.get_verb_info:1 of
msgid "Gets verb information and returns a VerbInfo instance."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.get_verb_info:5 of
msgid "VerbInfo object or None."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.get_conjug_info:1 of
msgid "Gets conjugation information corresponding to the given template."
msgstr ""

#: mlconjug.PyVerbiste.VerbInfo:7
#: mlconjug.PyVerbiste.Verbiste.get_conjug_info:3 of
msgid "string. Name of the verb ending pattern."
msgstr ""

#: mlconjug.PyVerbiste.Verbiste.get_conjug_info:5 of
msgid ""
"OrderedDict or None. OrderedDict containing the conjugated suffixes of "
"the template."
msgstr ""

#: mlconjug.PyVerbiste.VerbInfo:1 of
msgid "This class defines the Verbiste verb information structure."
msgstr ""

#: mlconjug.PyVerbiste.VerbInfo:3 of
msgid "string. Infinitive form of the verb."
msgstr ""

#: mlconjug.PyVerbiste.VerbInfo:5 of
msgid "string. Lexical root of the verb."
msgstr ""

#: mlconjug.PyVerbiste.Verb:1 of
msgid "This class defines the Verb Object."
msgstr ""

#: mlconjug.PyVerbiste.Verb:3 of
msgid "VerbInfo Object."
msgstr ""

#: mlconjug.PyVerbiste.Verb:4 of
msgid "OrderedDict."
msgstr ""

#: mlconjug.PyVerbiste.Verb._load_conjug:1
#: mlconjug.PyVerbiste.VerbEn._load_conjug:1
#: mlconjug.PyVerbiste.VerbEs._load_conjug:1
#: mlconjug.PyVerbiste.VerbFr._load_conjug:1
#: mlconjug.PyVerbiste.VerbIt._load_conjug:1
#: mlconjug.PyVerbiste.VerbPt._load_conjug:1
#: mlconjug.PyVerbiste.VerbRo._load_conjug:1 of
msgid "Populates the inflected forms of the verb."
msgstr ""

#: mlconjug.PyVerbiste.Verb._load_conjug:2 of
msgid "This is the generic version of this method."
msgstr ""

#: mlconjug.PyVerbiste.Verb._load_conjug:3 of
msgid "It does not add personal pronouns to the conjugated forms."
msgstr ""

#: mlconjug.PyVerbiste.Verb._load_conjug:4 of
msgid ""
"This method can handle any new language if the conjugation structure "
"conforms to the Verbiste XML Schema."
msgstr ""

#: mlconjug.PyVerbiste.VerbEn:1 mlconjug.PyVerbiste.VerbEs:1
#: mlconjug.PyVerbiste.VerbFr:1 mlconjug.PyVerbiste.VerbIt:1
#: mlconjug.PyVerbiste.VerbPt:1 mlconjug.PyVerbiste.VerbRo:1 of
msgid "Bases: :class:`mlconjug.PyVerbiste.Verb`"
msgstr ""

#: mlconjug.PyVerbiste.VerbFr:1 of
msgid "This class defines the French Verb Object."
msgstr ""

#: mlconjug.PyVerbiste.VerbEn._load_conjug:2
#: mlconjug.PyVerbiste.VerbEs._load_conjug:2
#: mlconjug.PyVerbiste.VerbFr._load_conjug:2
#: mlconjug.PyVerbiste.VerbIt._load_conjug:2
#: mlconjug.PyVerbiste.VerbPt._load_conjug:2
#: mlconjug.PyVerbiste.VerbRo._load_conjug:2 of
msgid "Adds personal pronouns to the inflected verbs."
msgstr ""

#: mlconjug.PyVerbiste.VerbEn:1 of
msgid "This class defines the English Verb Object."
msgstr ""

#: mlconjug.PyVerbiste.VerbEs:1 of
msgid "This class defines the Spanish Verb Object."
msgstr ""

#: mlconjug.PyVerbiste.VerbIt:1 of
msgid "This class defines the Italian Verb Object."
msgstr ""

#: mlconjug.PyVerbiste.VerbPt:1 of
msgid "This class defines the Portuguese Verb Object."
msgstr ""

#: mlconjug.PyVerbiste.VerbRo:1 of
msgid "This class defines the Romanian Verb Object."
msgstr ""

