"""
PyVerbiste.

| A Python library for conjugating verbs in French, English, Spanish, Italian, Portuguese and Romanian (more soon).
| It contains conjugation data generated by machine learning models using the python library mlconjug3.
| More information about mlconjug3 at https://pypi.org/project/mlconjug3/


| The conjugation data conforms to the XML schema defined by Verbiste.
| More information on Verbiste at https://perso.b2b2c.ca/~sarrazip/dev/conjug_manager.html

"""

__author__ = 'SekouDiaoNlp'
__author_email__ = 'diao.sekou.nlp@gmail.com'


import copy
import defusedxml.ElementTree as ET
import json
from concurrent.futures import ThreadPoolExecutor
from collections import OrderedDict, defaultdict
import pkg_resources
from mlconjug3.constants import *
from mlconjug3.verbs import *
from mlconjug3.conjug_manager import *


class Verbiste(ConjugManager):
    """
    This is the class handling the Verbiste xml files.

    :param language: string.
        | The language of the conjugator. The default value is fr for French.
        | The allowed values are: fr, en, es, it, pt, ro.
    :ivar language: Language of the conjugator.
    :ivar verbs: Dictionary where the keys are verbs and the values are conjugation patterns.
    :ivar conjugations: Dictionary where the keys are conjugation patterns and the values are inflected forms.

    """

    def _load_verbs(self, verbs_file):
        """
        Load and parses the verbs from the xml file.

        :param verbs_file: string or path object.
            Path to the verbs xml file.

        """
        self.verbs = self._parse_verbs(verbs_file.replace('json', 'xml'))
        return

    @staticmethod
    def _parse_verbs(file):
        """
        Parses the XML file.
    
        :param file: FileObject.
            XML file containing the verbs.
        :return: defaultdict.
            An defaultdict containing the verb and its template for all verbs in the file.
    
        """
        def get_verb_data(verb):
            template = verb.find("t").text
            index = - len(template[template.index(":") + 1:])
            root = verb_name if index == 0 else verb_name[:index]
            return {"template": template, "root": root}
        
        verbs_dic = defaultdict(lambda: defaultdict(str))
        tree = ET.parse(file)
        root = tree.getroot()
        with ThreadPoolExecutor() as executor:
            for verb in root.iter("v"):
                verb_name = verb.find("i").text
                template = verb.find("t").text
                index = - len(template[template.index(":") + 1:])
                root = verb_name if index == 0 else verb_name[:index]
                future = executor.submit(get_verb_data, verb)
                verbs_dic[verb_name] = future.result()
        return verbs_dic

    def _load_conjugations(self, conjugations_file):
        """
        Load and parses the conjugations from the xml file.

        :param conjugations_file: string or path object.
            Path to the conjugation xml file.

        """
        self.conjugations = self._parse_conjugations(conjugations_file.replace('json', 'xml'))
        return

    def _parse_conjugations(self, file):
        """
        Parses the XML file using multithreading.

        :param file: FileObject.
            XML file containing the conjugation templates.
        :return: OrderedDict.
            An OrderedDict containing all the conjugation templates in the file.

        """
        conjugations_dic = {}
        xml = ET.parse(file)
        templates = xml.findall("template")
        with ThreadPoolExecutor() as executor:
            for template, conjugation_template in zip(templates, executor.map(self._parse_template, templates)):
                template_name = template.get("name")
                conjugations_dic[template_name] = conjugation_template
        return conjugations_dic
    
    def _parse_template(self, template):
        """
        Parses a single template in the XML file.

        :param template: Element.
            XML element representing a single conjugation template.
        :return: OrderedDict.
            An OrderedDict containing the conjugation template.

        """
        conjugation_template = OrderedDict()
        template_name = template.get("name")
        for mood in list(template):
            conjugation_template[mood.tag] = OrderedDict()
            for tense in list(mood):
                conjugation_template[mood.tag][tense.tag.replace('-', ' ')] = self._load_tense(tense)
        return conjugation_template

    @staticmethod
    def _load_tense(tense):
        """
        Load and parses the inflected forms of the tense from xml file.

        :param tense: list of xml tags containing inflected forms.
            The list of inflected forms for the current tense being processed.
        :return: list.
            List of inflected forms.

        """
        persons = list(tense)
        if not persons:
            return None
        elif len(persons) == 1:
            if persons[0].find("i") is None:
                return None
            conjug = persons[0].find("i").text
        else:
            conjug = []
            for pers, term in enumerate(persons):
                if term.find("i") is not None:
                    if term.find("i").text is not None:
                        conjug.append((pers, term.find("i").text))
                    else:
                        conjug.append((pers, ''))
                else:
                    conjug.append((pers, None))
        return conjug

if __name__ == "__main__":
    pass
